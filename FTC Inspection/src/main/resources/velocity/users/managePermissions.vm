##
## Copyright (c) 2016-2018 Thomas Barnette and Trey Woodlief
## All Rights Reserved.
##

#parse("/velocity/layout.vm")
#@mainLayout()
<!-- This is based off of the things found here: https://jsfiddle.net/DTcHh/16420/ -->
<script>
/*
 * Original example found here: http://www.jquerybyexample.net/2012/05/how-to-move-items-between-listbox-using.html
 * Modified by Esau Silva to support 'Move ALL items to left/right' and add better stylingon on Jan 28, 2016.
 * 
 */

$(document).ready(function() {
	var userRoleMap = $userRoleMap;
   $('#btnRight').click(function (e) {
        var selectedOpts = $('#allUsers option:selected');
        if (selectedOpts.length == 0) {
            //alert("Nothing to move.");
            e.preventDefault();
        }

        $('#selectedUsers').append($(selectedOpts).clone());
        $(selectedOpts).remove();
        
        //copied from: https://stackoverflow.com/questions/12073270/sorting-options-elements-alphabetically-using-jquery
        var options = $('#selectedUsers option');
        var arr = options.map(function(_, o) { return { t: $(o).text(), v: o.value }; }).get();
		arr.sort(function(o1, o2) { return o1.v > o2.v ? 1 : o1.v < o2.v ? -1 : 0; });
		options.each(function(i, o) {
  			o.value = arr[i].v;
  			$(o).text(arr[i].t);
		});
        e.preventDefault();
        
        updateRoles();
    });

    $('#btnLeft').click(function (e) {
        var selectedOpts = $('#selectedUsers option:selected');
        if (selectedOpts.length == 0) {
            //alert("Nothing to move.");
            e.preventDefault();
        }

        $('#allUsers').append($(selectedOpts).clone());
        $(selectedOpts).remove();
        
         //copied from: https://stackoverflow.com/questions/12073270/sorting-options-elements-alphabetically-using-jquery
        var options = $('#allUsers option');
        var arr = options.map(function(_, o) { return { t: $(o).text(), v: o.value }; }).get();
		arr.sort(function(o1, o2) { return o1.v > o2.v ? 1 : o1.v < o2.v ? -1 : 0; });
		options.each(function(i, o) {
  			o.value = arr[i].v;
  			$(o).text(arr[i].t);
		});
        e.preventDefault();
    });

    $('#btnAllLeft').click(function (e) {
        var selectedOpts = $('#selectedUsers option');
        if (selectedOpts.length == 0) {
            //alert("Nothing to move.");
            e.preventDefault();
        }

        $('#allUsers').append($(selectedOpts).clone());
        $(selectedOpts).remove();
        
        var options = $('#allUsers option');
        var arr = options.map(function(_, o) { return { t: $(o).text(), v: o.value }; }).get();
		arr.sort(function(o1, o2) { return o1.v > o2.v ? 1 : o1.v < o2.v ? -1 : 0; });
		options.each(function(i, o) {
  			o.value = arr[i].v;
  			$(o).text(arr[i].t);
		});
        e.preventDefault();
    });
    
    var options = $('#allUsers option');
    var arr = options.map(function(_, o) { return { t: $(o).text(), v: o.value }; }).get();
	arr.sort(function(o1, o2) { return o1.v > o2.v ? 1 : o1.v < o2.v ? -1 : 0; });
	options.each(function(i, o) {
  		o.value = arr[i].v;
  		$(o).text(arr[i].t);
	});
    
    //BEGIN CODE THAT TREY WROTE AND WAS NOT COPIED
    
    $('input[type=radio][name=possibleRoles]').change(function() {
    	updateRoles();
    });
    $('#removeButton').click(function(e) {
    	sendData(false);
    });
    $('#addButton').click(function(e) {
    	sendData(true);
    });
    
    $('#deleteButton').click(function(e) {
    	if (!confirm("Are you sure you want to delete these users?\nThis action cannot be undone.")) {
    		return;
    	}
    	var sel = $('#selectedUsers option').toArray();
    	var res = [];
    	for(var i = 0; i < sel.length; i++){
    		res.push(sel[i].value);
    	}
    	$.ajax({
			url: "delete/",
  			type: "POST",
  			data: {changedUsers:res},
  			success: function(data){
  				$('#selectedUsers option').remove();
  				document.getElementById("msg").innerHTML = "Users successfully removed";
  				updateRoles();
  			},
  			error:function(xhr, ajaxOptions, thrownError){  				
                console.log(xhr);
                console.log(ajaxOptions);
                console.log(thrownError);
                document.getElementById("msg").innerHTML = xhr.responseText;
  			}});
    });
    
    function updateRoles() {
    	var selectedOpt = $('#possibleRoles option:selected')[0].value;
    	var userOptions = $('#selectedUsers option');
    	for (let user of userOptions) {
    		if (userRoleMap[user.value].indexOf(selectedOpt) >= 0) {
    			user.style.color = "#008900";
    		} else {
    			user.style.color = "#BB0000";
    		}
    	}
    }
    function sendData(addPermission) {
    	var sel = $('#selectedUsers option').toArray();
    	var res = [];
    	for(var i = 0; i < sel.length; i++){
    		res.push(sel[i].value);
    	}
    	var assignedRole = $('#possibleRoles option:selected')[0].value;
    	$.ajax({
			url: "",
  			type: "POST",
  			data: {role:assignedRole, changedUsers:res, add:addPermission},
  			success: function(data){
  				if (addPermission) {
  					for (let user of res) {
	  					userRoleMap[user].push(assignedRole);
  					}	
  					document.getElementById("msg").innerHTML = "Permissions successfully granted";
  				} else {
  					for (let user of res) {
  						let arr = userRoleMap[user];
  						let index = -1;
  						let i = 0;
  						for (let r of arr) {
  							if (r == assignedRole) {
  								index = i;
  								break;
  							}
  							i++;
  						}
  						if (index != -1) {
	  						arr.splice(index, 1);
	  					}
  					}
  					document.getElementById("msg").innerHTML = "Permissions successfully removed";
  				}
  				updateRoles();
  			},
  			error:function(xhr, ajaxOptions, thrownError){  				
                console.log(xhr);
                console.log(ajaxOptions);
                console.log(thrownError);
                document.getElementById("msg").innerHTML = xhr.responseText;
  			}});
    }
});

</script>
<table>
<tr><th>All Users:</th><th></th><th>Users to Edit:</th></tr>
<tr style="height:20%"><td style="width:45%;height:100%">
<select multiple="multiple" id="allUsers" size=10 style="width:100%;height:100%">
#foreach($user in $editableUsers)
	<option value="$user.username">$user.getUsername(): $user.getRealName()</option>
#end
</select>
</td><td style="width:10%">
<input type="button" value=">" id="btnRight"/>
<input type="button" value="<" id="btnLeft"/>
<input type="button" value="<<" id="btnAllLeft"/>
</td><td style="width:45%;height:100%">
<select multiple="multiple" id="selectedUsers" size=10 style="width:100%;height:100%">
</select>
</td></tr></table>
<!-- Set of possible roles to change-->
<br>
<table>
<tr>
<th>
Role to Edit:
</th>
<th>
</th></tr>
<tr><td>
<select id="possibleRoles">
#foreach ($role in $possibleRoles)
	<option value="$role">$role</role>
#end
</select>
</td>
<td>
<table style="width:100%">
<tr style="width:100%">
<td style="width:50%">
<input type="button" id="addButton" class="good notification" value="Add Permissions">
</td><td style="width:50%">
<input type="button" id="removeButton" class="bad notification" value="Remove Permissions">
</td>
</tr>
</table>
<div id="msg" style="text-align:center"></div>
</td>
</tr>
<tr><td></td><td>
<br><br><br>
<input type="button" id="deleteButton" class="bad notification" value="Delete Users">
</td></tr></table>

#end