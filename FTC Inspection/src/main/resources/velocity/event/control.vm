
#parse("/velocity/event/scoreMacros.vm")

<html>
<body>
<script src="/js/jquery-1.12.4.js"></script>
  	<script src="/js/jquery-ui.js"></script>
  	<script src="/js/general.js"></script>
  	<script>
  	
  	var lastBreakdown = 0;
  	var lastFullScore = 0;
  	var acceptScores = true;
  	
  	function updateScoreBreakdown(obj){
  		for(var i = 0; i < 2; i++){
  			var a = i == 0 ? "blue" : "red"
	  		document.getElementById(a + "AutoScore").innerHTML = obj[a].autoPoints;
	  		document.getElementById(a + "JewelPoints").innerHTML = obj[a].jewelPoints;
	  		document.getElementById(a + "AutoGlyphPoints").innerHTML = obj[a].glyphAutoPoints;
	  		document.getElementById(a + "KeyPoints").innerHTML = obj[a].keyPoints;
	  		document.getElementById(a + "ParkingPoints").innerHTML = obj[a].parkingPoints;
	  		document.getElementById(a + "TeleopScore").innerHTML = obj[a].teleopPoints;
	  		document.getElementById(a + "GlyphPoints").innerHTML = obj[a].glyphPoints;
	  		document.getElementById(a + "RowPoints").innerHTML = obj[a].rowPoints;
	  		document.getElementById(a + "ColumnPoints").innerHTML = obj[a].columnPoints;
	  		document.getElementById(a + "CipherPoints").innerHTML = obj[a].cipherPoints;
	  		document.getElementById(a + "RelicPoints").innerHTML = obj[a].relicPoints;
	  		document.getElementById(a + "BalancePoints").innerHTML = obj[a].balancePoints;
	  		document.getElementById(a + "FoulScore").innerHTML = obj[a].foulPoints;
  		}
  	}
  	
  	function updateScore(alliance, key, value){
  		var obj={};
  		obj[key] = value;
  		$.ajax({
                url: "../score/edit/"+alliance+"/",
                type: "PUT",
                dataType: 'json',
                data: obj,
                success: function (data) {                    
  					updateScoreBreakdown(data);
                },
                error: function () {
                    console.log("Error");
                }});
  	}
  	
  	//TODO: editing score should send data to server, and the response should contain score update for relevant alliance or both
  	//Should NOT notify Displays of score update.
  	function up(alliance, key){
  		var txt = document.getElementById(alliance+"_"+key+"_score").children[1];
  		var val = parseInt(txt.value);
  		val += 1;
  		txt.value = val;
  		updateScore(alliance, key, val);
  	}
  	function down(alliance, key){
  		var txt = document.getElementById(alliance+"_"+key+"_score").children[1];
  		var val = parseInt(txt.value);
  		val -= val == 0 ? 0 : 1;
  		txt.value = val;
  		updateScore(alliance, key, val);
  	}
  	
  	//really, this should run from randomization to pre-commit (after ref review done)
  	//also, server should hold response until change.
  	//should track timestamp of last update, sends get with that info, server knows last update, block if no update since then
  	function getScoreUpdate(block){
  		var data = {};
  		$.ajax({
  			url: "../scorebreakdown/",
  			type: "GET",
  			dataType: 'json',
  			data: {
  				block:block,
  				last:lastBreakdown
  			},
  			success: function(data){
  				if(acceptScores){
	  				lastBreakdown = data.ts;
	  				updateScoreBreakdown(data);
	  				window.setTimeout(getScoreUpdate(true), 1000);
	  			}
  			},
  			error: function(){
  				if(acceptScores)window.setTimeout(getScoreUpdate(true), 1000);
  			}});
  	}
  	
  	//really, this should run after randomization -> pre-commit (after ref review done)
  	//also, server should hold response util change
  	//MUST stop during pre-commit editing!
  	function getScoreControlUpdate(block){
  		$.ajax({
  			url: "../score/",
  			type: "GET",
  			dataType: 'json',
  			data: {
  				block:block,
  				last:lastFullScore
  			},
  			success: function(data){
  				if(acceptScores){
	  				updateScoreControl(data);
	  				lastFullScore = data.ts;
	  				window.setTimeout(getScoreControlUpdate(true), 1000);
  				}
  			},
  			error: function(){
  				if(acceptScores)window.setTimeout(getScoreControlUpdate(true), 1000);
  			}});
  	}
  	
  	function updateScoreControl(data){
  		for(var i = 0; i < 2; i++){
  			var a = i == 0 ? "blue" : "red"
  			for(var key in data[a]){
  				var elem = document.getElementById(a+"_"+key+"_score");
  				if(elem){
  					try{
  						elem.getElementsByTagName("input")[0].value=data[a][key];
  					}catch(err){}
  				}
  			}
  			//do the odd ones: relics
  			if(eval(data[a]["relic1Standing"])!=(document.getElementById(a+"Relic1Standing").getAttribute("state") == "on")){
				toggleStanding(a,1);
			}  
			if(eval(data[a]["relic2Standing"])!=(document.getElementById(a+"Relic2Standing").getAttribute("state") == "on")){
				toggleStanding(a,2);
			}  
			//if(data[a].relic1Zone == 0){	
				clearZones(a, 1);		
			//}
			if(data[a].relic1Zone > 0){
				document.getElementById(a+"Relic1Zone"+data[a].relic1Zone).setAttribute("state", "on");
			}
			//if(data[a].relic2Zone == 0){	
				clearZones(a, 2);		
			//}
			if(data[a].relic2Zone > 0){
				document.getElementById(a+"Relic2Zone"+data[a].relic2Zone).setAttribute("state", "on");
			}
  			
  			//TODO cryptoboxes and jewels
  		}
  	}
  	
  	function updateScheduleTab(schedule){
  		var sched = document.getElementById("ScheduleTab");
  		for(var i = 0; i < schedule.length; i++){
  			var m = i + 1;
  			console.log(schedule[i]);
  			var match = schedule[i];
  			var entry = document.getElementById("match"+m);
  			if(entry == null){
  				entry = document.createElement("div");
  				entry.id = "match"+m;
  				entry.className = "scheduleEntry";
  				entry.setAttribute("onclick", "loadMatch(this)");
  				sched.appendChild(entry);
  			} else{
  				while (entry.firstChild) {
				  entry.removeChild(entry.firstChild);
				}
  			}
			var cell = document.createElement("div");
			cell.className= "scheduleMatch";
			cell.id = "match"+m+"match";
			cell.innerHTML = match.match;
			entry.appendChild(cell);
			
			cell = document.createElement("div");
			cell.className = "scheduleStatus";
			cell.id = "match"+m+"status";
			cell.innerHTML = match.status;
			entry.appendChild(cell);
			
			cell = document.createElement("div");
			cell.className = "scheduleTeam";
			cell.id = "match"+m+"redScore";
			cell.innerHTML = match.redScore;
			entry.appendChild(cell);
			
			for(var n = 1; n < 3; n++){ 
				cell = document.createElement("div");
				cell.className = "scheduleTeam";
  				cell.id = "match"+m+"red"+m;
  				cell.innerHTML = match["red"+n];
  				entry.appendChild(cell);  				
			}
			for(var n = 1; n < 3; n++){ 
				cell = document.createElement("div");
				cell.className = "scheduleTeam";
  				cell.id = "match"+m+"blue"+m;
  				cell.innerHTML = match["blue"+n];
  				entry.appendChild(cell);  				
			}
			
			cell = document.createElement("div");
			cell.className = "scheduleTeam";
			cell.id = "match"+m+"blueScore";
			cell.innerHTML = match.blueScore;
			entry.appendChild(cell);
  			
  		}
  	}
  	
  	function loadMatch(src){
  		//send load match request
  		//get match reload match info from server 
  		$.ajax({
  			url: "../match/load/"+src.id.substring(5)+'/',
  			type: "POST",
  			success: function(data){
  				getCurrentMatchData();
  			},
  			error:function(xhr, ajaxOptions, thrownError){
  				
	                    console.log(xhr);
	                    console.log(ajaxOptions);
	                    console.log(thrownError);
  			}});  		
  		
  	}
  	function fillMatchInfo(data){
  	
  	//TODO clear the cards and DQ box
  		var slot = document.getElementById("red_1_slot");
  		slot.getElementsByClassName("teamNumber")[0].value = data.red1;
  		
  		slot = document.getElementById("red_2_slot");
  		slot.getElementsByClassName("teamNumber")[0].value = data.red2;
  		
  		
  		slot = document.getElementById("blue_1_slot");
  		slot.getElementsByClassName("teamNumber")[0].value = data.blue1;
  		
  		slot = document.getElementById("blue_2_slot");
  		slot.getElementsByClassName("teamNumber")[0].value = data.blue2;
  		
  		
  	}
  	
  	//Get the teams, 
  	function getCurrentMatchData(){
  		$.ajax({
  			url: "../match/",
  			type: "GET",
  			dataType: 'json',
  			success: function(data){
  				fillMatchInfo(data);
  			},
  			error:function(xhr, ajaxOptions, thrownError){
  				
	                    console.log(xhr);
	                    console.log(ajaxOptions);
	                    console.log(thrownError);
  			}});
  	}
  	
  	function getScheduleStatus(){
  		$.ajax({
  			url: "../schedule/status/",
  			type: "GET",
  			dataType: 'json',
  			success: function(data){
  				updateScheduleTab(data);
  			},
  			error: function(){
  			}});
  	}
  	
  	function clearZones(alliance, relic){
  		for(var i = 1; i < 4; i++){
		 var x = document.getElementById(alliance+"Relic"+relic+"Zone"+i);
		 x.setAttribute("state","off");
		}	
  	}
  	function relicZone(alliance, relic, zone){
		var r = document.getElementById(alliance+"Relic"+relic+"Zone"+zone);
		var next = r.getAttribute("state") == "on" ? "off" : "on";
		clearZones(alliance, relic);
		if(zone > 0){		
			r.setAttribute("state", next);
		}
		updateScore(alliance, "relic"+relic+"Zone", next == "off" ? 0 : zone); 
	}
		
	function toggleStanding(alliance, relic){
		var r = document.getElementById(alliance+"Relic"+relic+"Standing");
		var next = r.getAttribute("state") == "on" ? "off" : "on";
		r.setAttribute("state", next );
		r.innerHTML = next == "on" ? "&#10004;" : "&nbsp;&nbsp;";
		updateScore(alliance, "relic"+relic+"Standing", next == "on" ? "true" : "false");
	}
  	
  	$().ready(function(){
  		getScheduleStatus();
  		getCurrentMatchData();
  		document.getElementById("scoreTabBtn").click();
  	});
  	
  	</script>
<style>
	body { margin:0; }
	#top{
		width:100%;
		height:20%;
		background:magenta;
	}
	#menuBar{
		width:100%;
		height:5%;
		background:yellow;
	}
	#matchControl{
		width:100%;
		height: 10%;
		background:orange;
		display: flex;
		align-items: center;
		justify-content: center;
	}
	#tabBar{
		width:100%;
		height:5%;
		background:green;
		display: flex;
		align-items: center;
		justify-content: left;
	}
	.tabContent{
		width:100%;
		height:60%;
		display: none;
		overflow:auto;
	}
	#leftScores{
		width:50%;
		height:100%;
		background:red;
		float:left;
	}
	#rightScores{
		width:50%;
		height:100%;
		background:blue;
		float:left;
	}
	.teamSlotHeader{
		width:100%;
		height:10%;
		background:purple;
	}
	.teamSlot{
		width:100%;
		height:30%;
		background:red;
		display: flex;
		align-items: center;
	}
	#leftTeams{
		width:40%;
		height:100%;
		background:pink;
		float:left;
	}
	#rightTeams{
		width:40%;
		height:100%;
		background:cyan;
		float:left;
	}
	#centerTop{
		width:20%;
		height:100%;
		background:white;
		float:left;
	}
	.matchControlButton{
		background-color: #4CAF50; /* Green */
		border: none;
		color: white;
		padding: 12px 20px;
		text-align: center;
		text-decoration: none;
		display: inline-block;
		font-size: 16px;
		margin: 4px 10px;
		cursor: pointer;
	}
	.matchControlButton:hover {
		background-color: #3e8e41;
	}
	.matchControlButton:disabled{
		background-color: #d3d3d3;
	}
	.matchControlButton[state="back"]{
		background-color: yellow;
		color:black;
	}
	.matchControlButton[state="warn"]{
		background-color: red;
	}
	.tabButton{
		background-color: #4CAF50; /* Green */
		border: none;
		color: white;
		padding: 2px 6px;
		text-align: center;
		text-decoration: none;
		display: inline-block;
		font-size: 16px;
		margin: 4px 10px;
		cursor: pointer;
	}
	
	.tabButton:hover {
		background-color: #3e8e41;
	}
	.dqBox{
		margin: 10px 10px;
	}
	.teamNumber{
		width:70px;
	}
	.teamCard{
		background-color: #4CAF50; /* Green */
		border: none;
		color: black;
		padding: 1px 1px;
		text-align: center;
		text-decoration: none;
		display: inline-block;
		font-size: 16px;
		margin: 1px 10px;
		cursor: pointer;
		border-radius: 3px;
	}
	.teamCard[value="yellow"]{
		background-color: yellow;
	}
	.teamCard[value="red"]{
		background-color:red;
	}
	.scoreBreakdown{
		float:left;
		
	}
	
	
	.scheduleEntry{
		height: 20px;
		background:blue;
	}
	.scheduleEntry:hover{
		cursor:pointer;
		background:#4040FF
	}
	.scheduleDescription{
		width: 200px;
		height : 100%;
		float:left;
	}
	.scheduleStatus{
		text-align:center;
		width: 150px;
		height : 100%;
		float:left;
	}
	.scheduleMatch{
		width: 60px;
		height : 100%;
		float:left;
		text-align:center;
	}
	.scheduleTeam{
		width:75px;
		height : 100%;
		float:left;
		text-align:center;
	}
	
	.scoreField{
		float:left;
		width:41;
		height:41;
		font-size:24px;
	}
	.scoreLabel{
		float:left;
		width: 70;
	}
	.scoreControl{
		
	}
	.breakdown{
		width:150;
	}
	.relicSet{
		width:147;
	}
	.relicControl{
		float:left;
		
	}
	.relicZone{
		background-color: #4CAF50; /* Green */
		border: none;
		color: white;
		padding: 12px 20px;
		text-align: center;
		text-decoration: none;
		font-size: 16px;
		margin: 1px 10px;
		cursor: pointer;
		display: block;
	}
	.relicZone:diabled{
		background-color: #4CAF50;
	}
	.relicZone[state="on"]{
		background-color: #0e5e11;
	}
	.relicZone[state="off"]{
		background-color: #5CBF60; 
	}
	</style>

<script>

function toggleCard(src){
	if(src.value == "green"){
		src.value = "yellow";
	} else if(src.value== "yellow"){
		src.value = "red";
	} else{
		src.value = "green";
	}
}

function randomize(){
	var postObj = {};
	$.post("../randomize/",postObj).done(function(data){
		console.log(data);
		//TODO listen for randomization by head ref
		//after button click, HR has option to rerandomize until match starts
		//once match starts, HR has info and stuff. And can enter cards.
		
		
		var rand = document.getElementById("randomBtn");
		rand.setAttribute("state", "warn");
		rand.innerHTML = "Re-Randomize";
		var showRand = document.getElementById("showBtn");
		showRand.disabled = false;
		showRand.setAttribute("state", "ready");
		var startBtn = document.getElementById("startBtn");
		startBtn.disabled = false;
		startBtn.setAttribute("state","ready");
		
	}).fail( function(xhr, textStatus, errorThrown) {
        console.log(textStatus);
    });
}


function setDisplay(){
var postObj = {};
	$.post("../display/match/",postObj).done(function(data){}).fail( function(xhr, textStatus, errorThrown) {
        console.log(textStatus);
    });
}

function setControlState(state){
	var arrows = document.getElementsByClassName("arrow");
	for(var i =0 ; i < arrows.length; i++){
		arrows[i].disabled = state;
	}
	var relics = document.getElementsByClassName("relicZone");
	for(var i =0; i < relics.length; i++){
		relics[i].disabled = state;
	}
	var fields = document.getElementsByClassName("scoreField");
	for(var i =0; i < fields.length; i++){
		fields[i].disabled = state;
	}
}

//this is where we long poll for refs to finish review
//after refs done, then can edit scores.... not helpful if no refs or problem
//... should scores unlock now?
//have another button for finish review that shuts out referees?
function waitForRefReview(){
	var obj = {};
	/*
	$.get("../match/status/reviewcomplete/",obj).done(function(data){
		
	}).fail(function(xhr, textStatus, error){
		
	});
	*/
	//TODO make ref review send back the current full scores, and set the controls to that before enabling them
	//TODO do that in the eventPages class
	var obj = {};
  		$.ajax({
  			url: "../match/status/reviewcomplete/",
  			type: "GET",
  			dataType: 'json',
  			data: obj,
  			success: function(data){
  				var commitBtn = document.getElementById("commitBtn");
				commitBtn.innerHTML = "Commit Scores";
				commitBtn.setAttribute("state", "ready");
				commitBtn.disabled = false;
				commitBtn.setAttribute("onclick","commit()");
				acceptScores = false;
				updateScoreControl(data);
				setControlState(false);
  			},
  			error: function(){
  				//TODO
				//window.setTimeout(waitForRefReview, 1000);
				//check if error is match reset, then dont care
  			}});
}

function waitForMatchEnd(){
var obj = {};
	$.get("../match/status/end/",obj).done(function(data){
		endMatch();		
	}).fail(function(xhr, textStatus, error){
		//TODO
		//window.setTimeout(waitForMatchEnd, 1000);
		//check if error is match reset, then dont care
	});
}

function endMatch(){
	var startBtn = document.getElementById("startBtn");
	startBtn.setAttribute("state","off");
	startBtn.innerHTML = "Start Auto";
	startBtn.disabled = true;
	startBtn.setAttribute("onclick", "start()");
	
	var commitBn = document.getElementById("commitBtn");
	commitBtn.setAttribute("state", "back");
	commitBtn.disabled = false;
	waitForRefReview();
	
}


function start(){
	//TODO use params to set custom match times
	var postObj = {};
	$.post("../time/start/",postObj).done(function(data){
		console.log(data);
		//TODO listen for randomization by scorekeeper
		//after button click, HR has option to rerandomize until match starts
		//once match starts, HR has info and stuff. And can enter cards.
		var preview = document.getElementById("previewBtn");
		preview.setAttribute("state", "off");
		preview.disabled = true;
		var rand = document.getElementById("randomBtn");
		rand.setAttribute("state", "off");
		rand.disabled = true;
		var showRand = document.getElementById("showBtn");
		showRand.disabled = true;
		showRand.setAttribute("state", "off");
		var startBtn = document.getElementById("startBtn");
		startBtn.setAttribute("state","back");
		startBtn.innerHTML = "Pause Match";
		startBtn.setAttribute("onclick", "pause()");
		waitForMatchEnd();
		acceptScores = true;
  		getScoreUpdate(false);
  		getScoreControlUpdate(false);
		//TODO local timer control here
		
	}).fail( function(xhr, textStatus, errorThrown) {
        console.log(textStatus);
    });
}

function pause(){
	var postObj = {};
	$.post("../time/pause/",postObj).done(function(data){
		var startBtn = document.getElementById("startBtn");
		startBtn.setAttribute("state","ready");
		startBtn.innerHTML = "Resume Match";
		startBtn.setAttribute("onclick", "resume()");
		
		//TODO Make abort an option now
		
		
	}).fail( function(xhr, textStatus, errorThrown) {
        console.log(textStatus);
    });
}

function resume(){
	var postObj = {};
	$.post("../time/resume/",postObj).done(function(data){
		var startBtn = document.getElementById("startBtn");
		startBtn.setAttribute("state","back");
		startBtn.innerHTML = "Pause Match";
		startBtn.setAttribute("onclick", "pause()");
		
		//TODO hide abort option		
		
	}).fail( function(xhr, textStatus, errorThrown) {
        console.log(textStatus);
    });
}

function showPreview(){
	var postObj = {};
	//TODO change to /display.preview?
	$.post("../display/preview/",postObj).done(function(data){}).fail( function(xhr, textStatus, errorThrown) {
        console.log(textStatus);
    });
}

function lockout(){
//Lockout refs and allow editing on control page.
//sends command to server. server should notify all waitinf for ref review, which will 
//adjust commit buttomn here.
//Sets match status to PRE_COMMIT (shoudl reject everything else from refs?) 
var postObj = {};
$.post("../control/lockout/",postObj).done(function(data){}).fail( function(xhr, textStatus, errorThrown) {
        console.log(textStatus);
    });
}

function getRelicZone(a, i){
	if(document.getElementById(a+"Relic"+i+"Zone3").getAttribute("state") == "on")return 3;
	if(document.getElementById(a+"Relic"+i+"Zone2").getAttribute("state") == "on")return 2;
	if(document.getElementById(a+"Relic"+i+"Zone1").getAttribute("state") == "on")return 1;
	return 0;
}

function getCommitObject(){
	var obj = {
		red_score_relic1Zone:     getRelicZone("red", 1),
		red_score_relic1Standing: document.getElementById("redRelic1Standing").getAttribute("state") == "on",
		red_score_relic2Zone:     getRelicZone("red", 2),
		red_score_relic2Standing: document.getElementById("redRelic2Standing").getAttribute("state") == "on",
		blue_score_relic1Zone:     getRelicZone("blue", 1),
		blue_score_relic1Standing: document.getElementById("blueRelic1Standing").getAttribute("state") == "on",
		blue_score_relic2Zone:     getRelicZone("blue", 2),
		blue_score_relic2Standing: document.getElementById("blueRelic2Standing").getAttribute("state") == "on",			
	};
	
	var scores = document.getElementsByClassName("scoreControl");
	for( var i = 0; i < scores.length; i++){
		var x = scores[i];
		var sp = x.id.split("_");
		obj[sp[0]+"_score_"+sp[1]] = x.children[1].value;
	}
	
	var slots = document.getElementsByClassName("teamSlot");
	for( var i = 0; i < slots.length; i++){
		var x = slots[i]; 
		var sp = x.id.split("_");
		obj[sp[0]+"_dq_"+sp[1]] = x.children[0].checked;
		var c = x.children[1].value;
		obj[sp[0]+"_card_"+sp[1]] = c == "yellow" ? 1 : (c == "red" ? 2 : 0);
	}
	return obj;
}

function commit(){
	var postObj = getCommitObject();
	//TODO send DQs and cards. Server should already have all scores. 
	//TODO after commit, update schedule tab
	$.post("../scorecommit/",postObj).done(function(data){
		console.log(data);
		
		var postBtn = document.getElementById("postBtn");
		postBtn.setAttribute("state","ready");
		postBtn.disabled = false;
		var commitBn = document.getElementById("commitBtn");
		commitBtn.setAttribute("state", "off");
		commitBtn.disabled = true;
		setControlState(true);
		
		getScheduleStatus();
  		getCurrentMatchData();
		
		
		
	}).fail( function(xhr, textStatus, errorThrown) {
        console.log(textStatus);
    });
}

function post(){ //posts results to AD
	var postBtn = document.getElementById("postBtn");
	postBtn.setAttribute("state","off");
	postBtn.diabled = true;
	
	var preview = document.getElementById("previewBtn");
	preview.setAttribute("state", "ready");
	preview.disabled = false;
	var rand = document.getElementById("randomBtn");
	rand.setAttribute("state", "ready");
	rand.innerHTML = "Randomize";
	rand.disabled = false;
	
}

function openTab(event, tabName){
	tabcontent = document.getElementsByClassName("tabContent");
	for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "none";
    }
    document.getElementById(tabName).style.display = "block";
}

</script>
		<div id="menuBar"></div>
		<div id="top">
			<div id="leftTeams">
				<div class="teamSlotHeader" style="text-align:right">DQ</div>
				<div class="teamSlot" id="red_1_slot" style="justify-content: flex-end;">
					<button class="teamCard" onclick="toggleCard(this)">Card</button>
					<input type="text" class="teamNumber"/>
					<input type="checkbox" class="dqBox"/>
				</div>
				<div class="teamSlot" id="red_2_slot" style="justify-content: flex-end;">
					<button class="teamCard" onclick="toggleCard(this)">Card</button>
					<input type="text" class="teamNumber"/>
					<input type="checkbox" class="dqBox"/>
				</div>
				<div class="teamSlot" id="red_3_slot" style="justify-content: flex-end;">
					<button class="teamCard" onclick="toggleCard(this)">Card</button>
					<input type="text" class="teamNumber"/>
					<input type="checkbox" class="dqBox"/>
				</div>
			</div>
			<div id="centerTop"></div>
			<div id="rightTeams">
				<div class="teamSlotHeader">DQ</div>
				<div class="teamSlot" id="blue_1_slot">
					<input type="checkbox" class="dqBox"/>
					<input type="text" class="teamNumber"/>
					<button class="teamCard" onclick="toggleCard(this)">Card</button>
				</div>
				<div class="teamSlot" id="blue_2_slot">
					<input type="checkbox" class="dqBox"/>
					<input type="text" class="teamNumber"/>
					<button class="teamCard" onclick="toggleCard(this)">Card</button>
				</div>
				<div class="teamSlot" id="blue_3_slot">
					<input type="checkbox" class="dqBox"/>
					<input type="text" class="teamNumber"/>
					<button class="teamCard" onclick="toggleCard(this)">Card</button>
				</div>
			</div>
		</div>
		<div id="matchControl">
			<button class="matchControlButton" id="previewBtn"onclick="showPreview()"state="ready">Match Preview</button>
			<button class="matchControlButton" id="randomBtn" onclick="randomize()"  state = "ready">Randomize</button>			
			<button class="matchControlButton" id="showBtn"   onclick="setDisplay()" state = "off" disabled>Set Display</button>
			<button class="matchControlButton" id="startBtn"  onclick="start()"      state = "off" disabled>Start Match</button>
			<button class="matchControlButton" id="commitBtn" onclick="lockout()"     state = "off" disabled>Edit Now</button>
			<button class="matchControlButton" id="postBtn"   onclick="post()"       state = "off" disabled>Post Results</button>
			
		</div>
		<!-- TODO https://www.w3schools.com/howto/howto_js_tabs.asp -->
		<div id="tabBar">
			<button class="tabButton" onclick="openTab(event, 'ScheduleTab')">Schedule</button>
			<button class="tabButton" onclick="openTab(event, 'ScoreTab')" id="scoreTabBtn">Scores</button>
			<button class="tabButton" onclick="openTab(event, 'SettingsTab')">Settings</button>
		</div>
		<div class="tabContent" id="ScoreTab">
			<div id="leftScores">
				#scores("red")
			</div>
			<div id="rightScores">
				#scores("blue")
				
			</div>
		</div>
		<div class="tabContent" id="ScheduleTab">
			<div class="scheduleEntry">
				<div class="scheduleMatch">Match</div>
				<div class="scheduleStatus">Status</div>
				<div class="scheduleTeam">Red Score</div>
				<div class="scheduleTeam">Red 1</div>
				<div class="scheduleTeam">Red 2</div>
				<div class="scheduleTeam">Blue 1</div>
				<div class="scheduleTeam">Blue 2</div>
				<div class="scheduleTeam">Blue Score</div>				
			</div>
			
		</div>
		<div class="tabContent" id="SettingsTab">
		</div>
	</body>
</html>