##
## Copyright (c) 2016-2018 Thomas Barnette and Trey Woodlief
## All Rights Reserved.
##

<!-- Copyright (c) 2016-2018 Thomas Barnette and Trey Woodlief -->
<!-- All Rights Reserved.                                      -->

#parse("/velocity/event/scoreMacros.vm")

<html>
<title>Match Control</title>
<body>
<script src="/js/jquery-1.12.4.js"></script>
  	<script src="/js/jquery-ui.js"></script>
  	<script src="/js/general.js"></script>
  	<script>
  	
  	window.onbeforeunload = function(){

  		//if preview button not available - in match, not committed
  		//Else if random is red - bad state 
  		if(document.getElementById("previewBtn").disabled || !document.getElementById("commitBtn").disabled){
  			return "DANGER! Leaving this page will result in loss of current match scores!";
  		} 
  		if(document.getElementById("randomBtn").getAttribute("state") == "warn"){
  			return 'WARNING! You are about to leave mid-match sequence, which can leave the system in a bad state! ';
  		}
  		return undefined;
	};
  	
  	var lastBreakdown = 0;
  	var lastFullScore = 0;
  	var acceptScores = true;
  	
  	#scoreJS()
  	
  	function updateScore(alliance, key, value){
  		var obj={};
  		obj[key] = value;
  		$.ajax({
                url: "../score/edit/"+alliance+"/",
                type: "PUT",
                dataType: 'json',
                data: obj,
                success: function (data) {                    
  					updateScoreBreakdown(data);
                },
                error: function () {
                    console.log("Error");
                }});
  	}
  	
  	//TODO: editing score should send data to server, and the response should contain score update for relevant alliance or both
  	//Should NOT notify Displays of score update.
  	
  	
  	//really, this should run from randomization to pre-commit (after ref review done)
  	//also, server should hold response until change.
  	//should track timestamp of last update, sends get with that info, server knows last update, block if no update since then
  	function getScoreUpdate(block){
  		var data = {};
  		$.ajax({
  			url: "../scorebreakdown/",
  			type: "GET",
  			dataType: 'json',
  			data: {
  				block:block,
  				last:lastBreakdown
  			},
  			success: function(data){
  				if(acceptScores){
	  				lastBreakdown = data.ts;
	  				updateScoreBreakdown(data);
	  				window.setTimeout(getScoreUpdate(true), 1000);
	  			}
  			},
  			error: function(){
  				if(acceptScores)window.setTimeout(getScoreUpdate(true), 1000);
  			}});
  	}
  	
  	//really, this should run after randomization -> pre-commit (after ref review done)
  	//also, server should hold response util change
  	//MUST stop during pre-commit editing!
  	function getScoreControlUpdate(block){
  		$.ajax({
  			url: "../score/",
  			type: "GET",
  			dataType: 'json',
  			data: {
  				block:block,
  				last:lastFullScore
  			},
  			success: function(data){
  				if(acceptScores){
	  				updateScoreControl(data);
	  				lastFullScore = data.ts;
	  				window.setTimeout(getScoreControlUpdate(true), 1000);
  				}
  			},
  			error: function(){
  				if(acceptScores)window.setTimeout(getScoreControlUpdate(true), 1000);
  			}});
  	}
  	
  	
  	
  	function updateScheduleTab(schedule){
  		var sched = document.getElementById("ScheduleTab");
  		for(var i = 0; i < schedule.length; i++){
  			
  			console.log(schedule[i]);
  			var match = schedule[i];
  			var m = match.match;
  			var entry = document.getElementById("match"+m);
  			if(entry == null){
  				entry = document.createElement("div");
  				entry.id = "match"+m;
  				entry.className = "scheduleEntry";
  			//	entry.setAttribute("onclick", "loadMatch(this)");
  				sched.appendChild(entry);
  			} else{
  				while (entry.firstChild) {
				  entry.removeChild(entry.firstChild);
				}
  			}
  			
  			var elim = typeof match.name !== 'undefined';
 
  			
			var cell = document.createElement("div");
			cell.className= "scheduleMatch";
			cell.id = "match"+m+"match";
			cell.innerHTML =  elim ? match.name : match.match;
			entry.appendChild(cell);
			
			cell = document.createElement("div");
			cell.className = "scheduleStatus";
			cell.id = "match"+m+"status";
			cell.innerHTML = eval(match.status) == 1 ? "Played" : (eval(match.status) == 2 ? "Cancelled" : "Scheduled");
			entry.appendChild(cell);
			
			cell = document.createElement("div");
			cell.className = "scheduleTeam";
			cell.id = "match"+m+"redScore";
			cell.innerHTML = match.redScore;
			entry.appendChild(cell);
			
			for(var n = 1; n < 4; n++){ 
				cell = document.createElement("div");
				cell.className = "scheduleTeam";
  				cell.id = "match"+m+"red"+n;
  				if(n<3 || elim){
  					cell.innerHTML = match["red"+n];
  				}
  				entry.appendChild(cell);  				
			}
			for(var n = 1; n < 4; n++){ 
				cell = document.createElement("div");
				cell.className = "scheduleTeam";
  				cell.id = "match"+m+"blue"+n;
  				if(n<3 || elim){
  					cell.innerHTML = match["blue"+n];
  				}
  				entry.appendChild(cell);  				
			}
			
			cell = document.createElement("div");
			cell.className = "scheduleTeam";
			cell.id = "match"+m+"blueScore";
			cell.innerHTML = match.blueScore;
			entry.appendChild(cell);
			
			cell = document.createElement("button");
			cell.className = "scheduleTeam";
			cell.id= "loadm"+m;
			cell.innerHTML = eval(match.status) == 0 ? "Play" : "Re-Play";
			cell.setAttribute("onclick","loadMatch(this)");
			entry.appendChild(cell);
			
			if(eval(match.status)==1){
				cell = document.createElement("button");
				cell.className = "scheduleTeam";
				cell.id= "postm"+m;
				cell.innerHTML = "Post";
				cell.setAttribute("onclick","postOld(this)");
				entry.appendChild(cell);			
			}
  			
  		}
  	}
  	
  	function loadMatch(src){
  		//send load match request
  		//get match reload match info from server 
  		$.ajax({
  			url: "../match/load/"+src.id.substring(5)+'/',
  			type: "POST",
  			success: function(data){
  				getCurrentMatchData();
  				//only preview is available, reset manual random, timeout, load test match buttons.
  				
  				/*
  				var postBtn = document.getElementById("postBtn");
				postBtn.setAttribute("state","off");
				postBtn.disabled = true;
				var commitBn = document.getElementById("commitBtn");
				commitBtn.setAttribute("state", "off");
				commitBtn.disabled = true;
				*/
				var preview = document.getElementById("previewBtn");
				preview.setAttribute("state", "ready");
				preview.disabled = false;
				var rand = document.getElementById("randomBtn");
				rand.innerHTML = "Randomize";
				rand.setAttribute("state", "off");
				rand.disabled = true;
				var set = document.getElementById("showBtn");
				set.setAttribute("state", "off");
				set.disabled = true;
				var start = document.getElementById("startBtn");
				start.setAttribute("state", "off");
				start.disabled = true;
				//UNDO LOCKOUT
		  		
		  		var btn = document.getElementById("match-1");
		  		btn.setAttribute("state", "ready");
		  		btn.disabled = false;
		  		var toBtns = document.getElementById("timeoutControls").getElementsByClassName("matchControlButton");
		  		for(var i = 0; i < toBtns.length; i++){
		  			toBtns[i].setAttribute("state", "ready");
		  			toBtns[i].disabled = false;
		  		}
		  		var randBtns = document.getElementById("externalRandomize").getElementsByClassName("matchControlButton");
  				for(var i = 0; i < randBtns.length; i++){
  					randBtns[i].setAttribute("state", "ready");
  				}
  		
  			},
  			error:function(xhr, ajaxOptions, thrownError){
  				
	                    console.log(xhr);
	                    console.log(ajaxOptions);
	                    console.log(thrownError);
  			}});  		
  		
  	}
  	
  	
  	//Get the teams, 
  	function getCurrentMatchData(){
  		$.ajax({
  			url: "../match/",
  			type: "GET",
  			dataType: 'json',
  			success: function(data){
  				fillMatchInfo(data);
  			},
  			error:function(xhr, ajaxOptions, thrownError){
  				
	                    console.log(xhr);
	                    console.log(ajaxOptions);
	                    console.log(thrownError);
  			}});
  	}
  	
  	function getScheduleStatus(){
  		$.ajax({
  			url: "../schedule/status/",
  			type: "GET",
  			dataType: 'json',
  			success: function(data){
  				updateScheduleTab(data);
  			},
  			error: function(){
  			}});
  	}
  	
  	
  	
  	
  	$().ready(function(){
  		getScheduleStatus();
  		getCurrentMatchData();
  		document.getElementById("scoreTabBtn").click();
  	});
  	
  	</script>
<style>
	body { margin:0; }
	#scoreStyle()
	#menuBar{
		width:100%;
		height:5%;
		background:#274555;
		color:white;
		text-align:center;
		font:25px  "Arial Black", Arial, Helvetica, sans-serif;
	}
	#tabBar{
		width:100%;
		height:5%;
		background:green;
		display: flex;
		align-items: center;
		justify-content: left;
	}
	.tabContent{
		width:100%;
		height:60%;
		display: none;
		overflow:auto;
	}
	.matchControlButton{
		background-color: #4CAF50; /* Green */
		border: none;
		color: white;
		padding: 12px 20px;
		text-align: center;
		text-decoration: none;
		display: inline-block;
		font-size: 16px;
		margin: 4px 10px;
		cursor: pointer;
	}
	.matchControlButton:hover[state="warn"] {
		background-color: pink;
	}
	.matchControlButton:hover[state="back"] {
		background-color: orange;
	}
	.matchControlButton:hover[state="ready"] {
		background-color: #3e8e41;
	}
	
	.matchControlButton[state="back"]{
		background-color: yellow;
		color:black;
	}
	.matchControlButton[state="warn"]{
		background-color: red;
	}
	.tabButton{
		background-color: #4CAF50; /* Green */
		border: none;
		color: white;
		padding: 2px 6px;
		text-align: center;
		text-decoration: none;
		display: inline-block;
		font-size: 16px;
		margin: 4px 10px;
		cursor: pointer;
	}
	.tabButton:disabled{
		background-color: #d3d3d3;
	}
	
	.tabButton:hover {
		background-color: #3e8e41;
	}
	
	.scheduleEntry{
		height: 20px;
		background:#44AAFF;
	}
	.scheduleEntry:hover{
		cursor:pointer;
		background:#4070FF;
	}
	.scheduleDescription{
		width: 200px;
		height : 100%;
		float:left;
	}
	.scheduleStatus{
		text-align:center;
		width: 110px;
		height : 100%;
		float:left;
	}
	.scheduleMatch{
		width: 60px;
		height : 100%;
		float:left;
		text-align:center;
	}
	.scheduleTeam{
		width:75px;
		height : 100%;
		float:left;
		text-align:center;
	}
	
	
	</style>

<script>


function randomize(){
	randomize(0);
}
	
function randomize(r){
	var postObj = {value:r};
	$.post("../randomize/",postObj).done(function(data){
		console.log(data);
		//TODO listen for randomization by head ref
		//after button click, HR has option to rerandomize until match starts
		//once match starts, HR has info and stuff. And can enter cards.
		
		
		var rand = document.getElementById("randomBtn");
		rand.setAttribute("state", "warn");
		rand.innerHTML = "Re-Randomize";
		var showRand = document.getElementById("showBtn");
		
		//only allow this if score has been committed
		if(document.getElementById("commitBtn").getAttribute("state") == "off"){
			showRand.disabled = false;
			showRand.setAttribute("state", "ready");
		}
		
		//COMMENCE LOCKOUT
		//Only force tab if not in score tab or settings tab
		if(tabcontent[2].style.display == "none"){
			openTab(null,'ScoreTab');//open score tab if not in settings tab (Stays in settings tab if already there. ~ force to scores at start of match)
		}
		//lockout from change tab
  		var tabs = document.getElementsByClassName("tabButton");
  		for(var i = 0; i < tabs.length; i++){
  			if(tabs[i].innerHTML != "Scores" && tabs[i].innerHTML != "Settings"){
	  			tabs[i].setAttribute("state", "off");
	  			tabs[i].disabled = true;
  			}
  		}
  		var btn = document.getElementById("match-1");
  		btn.setAttribute("state", "off");
  		btn.disabled = true;
  		var toBtns = document.getElementById("timeoutControls").getElementsByClassName("matchControlButton");
  		for(var i = 0; i < toBtns.length; i++){
  			toBtns[i].setAttribute("state", "off");
  			toBtns[i].disabled = true;
  		}
  		var randBtns = document.getElementById("externalRandomize").getElementsByClassName("matchControlButton");
  		for(var i = 0; i < randBtns.length; i++){
  			randBtns[i].setAttribute("state", "warn");
  		}
		
	}).fail( function(xhr, textStatus, errorThrown) {
        console.log(textStatus);
    });
}


function setDisplay(){
var postObj = {};
	$.post("../display/match/",postObj).done(function(data){
		var startBtn = document.getElementById("startBtn");
		startBtn.disabled = false;
		startBtn.setAttribute("state","ready");
	}).fail( function(xhr, textStatus, errorThrown) {
        console.log(textStatus);
    });
}



//this is where we long poll for refs to finish review
//after refs done, then can edit scores.... not helpful if no refs or problem
//... should scores unlock now?
//have another button for finish review that shuts out referees?
function waitForRefReview(){
	var obj = {};
	/*
	$.get("../match/status/reviewcomplete/",obj).done(function(data){
		
	}).fail(function(xhr, textStatus, error){
		
	});
	*/
	//TODO make ref review send back the current full scores, and set the controls to that before enabling them
	//TODO do that in the eventPages class
	var obj = {};
  		$.ajax({
  			url: "../match/status/reviewcomplete/",
  			type: "GET",
  			dataType: 'json',
  			data: obj,
  			success: function(data){
  				var commitBtn = document.getElementById("commitBtn");
				commitBtn.innerHTML = "Commit Scores";
				commitBtn.setAttribute("state", "ready");
				commitBtn.disabled = false;
				commitBtn.setAttribute("onclick","commit()");
				acceptScores = false;
				updateScoreControl(data);
				$.ajax({
	                url: "../score/edit/red/",
	                type: "PUT",
	                dataType: 'json',
	                data: {},
	                success: function (data) {                    
	  					updateScoreBreakdown(data);	  					
						setControlState(false);
	                },
	                error: function () {
	                    console.log("Error");
                }});
  			},
  			error: function(){
  				//TODO
				//window.setTimeout(waitForRefReview, 1000);
				//check if error is match reset, then dont care
  			}});
}

function waitForMatchEnd(){
var obj = {};
	$.get("../match/status/end/",obj).done(function(data){
		endMatch();		
	}).fail(function(xhr, textStatus, error){
		//TODO
		//window.setTimeout(waitForMatchEnd, 1000);
		//check if error is match reset, then dont care
	});
}

function endMatch(){
	var startBtn = document.getElementById("startBtn");
	startBtn.setAttribute("state","off");
	startBtn.innerHTML = "Start Auto";
	startBtn.disabled = true;
	startBtn.setAttribute("onclick", "start()");
	
	var commitBn = document.getElementById("commitBtn");
	commitBtn.setAttribute("state", "back");
	commitBtn.disabled = false;
	
	var previewBtn = document.getElementById("previewBtn");
	previewBtn.setAttribute("state", "ready");
	previewBtn.disabled = false;
	
	var rand = document.getElementById("randomBtn");
	rand.innerHTML = "Randomize";
	
	//UNDO LOCKOUT
  		var tabs = document.getElementsByClassName("tabButton");
  		for(var i = 0; i < tabs.length; i++){
  			tabs[i].setAttribute("state", "ready");
  			tabs[i].disabled = false;
  		}
  		var btn = document.getElementById("match-1");
  		btn.setAttribute("state", "ready");
  		btn.disabled = false;
  		var toBtns = document.getElementById("timeoutControls").getElementsByClassName("matchControlButton");
  		for(var i = 0; i < toBtns.length; i++){
  			toBtns[i].setAttribute("state", "ready");
  			toBtns[i].disabled = false;
  		}
  		var randBtns = document.getElementById("externalRandomize").getElementsByClassName("matchControlButton");
  		for(var i = 0; i < randBtns.length; i++){
  			randBtns[i].setAttribute("state", "warn");
  		}
	
	waitForRefReview();
	
}


function start(){
	//TODO use params to set custom match times
	var postObj = {};
	$.post("../time/start/",postObj).done(function(data){
		console.log(data);
		//TODO listen for randomization by scorekeeper
		//after button click, HR has option to rerandomize until match starts
		//once match starts, HR has info and stuff. And can enter cards.
		var preview = document.getElementById("previewBtn");
		preview.setAttribute("state", "off");
		preview.disabled = true;
		var rand = document.getElementById("randomBtn");
		rand.setAttribute("state", "off");
		rand.disabled = true;
		var showRand = document.getElementById("showBtn");
		showRand.disabled = true;
		showRand.setAttribute("state", "off");
		var startBtn = document.getElementById("startBtn");
		startBtn.setAttribute("state","back");
		startBtn.innerHTML = "Pause Match";
		startBtn.setAttribute("onclick", "pause()");
		var commitBtn = document.getElementById("commitBtn");
		commitBtn.innerHTML = "Edit Now";
		commitBtn.setAttribute("onclick","lockout()");
		commitBtn.setAttribute("state","off");
				
		var postBtn = document.getElementById("postBtn");
		postBtn.setAttribute("state", "off");
		postBtn.disabled = true;
		waitForMatchEnd();
		acceptScores = true;
  		getScoreUpdate(false);
  		getScoreControlUpdate(false);
  		
  		var tabs = document.getElementsByClassName("tabButton");
  		for(var i = 0; i < tabs.length; i++){
	  		tabs[i].setAttribute("state", "off");
	  		tabs[i].disabled = true;
  		}
  		openTab(null,'ScoreTab'); //force score tab open
  		
		//TODO local timer control here
		
		
		
	}).fail( function(xhr, textStatus, errorThrown) {
        console.log(textStatus);
    });
}

function pause(){
	var postObj = {};
	$.post("../time/pause/",postObj).done(function(data){
		var startBtn = document.getElementById("startBtn");
		startBtn.setAttribute("state","ready");
		startBtn.innerHTML = "Resume Match";
		startBtn.setAttribute("onclick", "resume()");
		
		var show = document.getElementById("showBtn");
		show.setAttribute("state", "warn");
		show.disabled = false;
		show.innerHTML = "Abort Match";
		show.setAttribute("onclick", "abort()");
		
		
	}).fail( function(xhr, textStatus, errorThrown) {
        console.log(textStatus);
    });
}

function resume(){
	var postObj = {};
	$.post("../time/resume/",postObj).done(function(data){
		var startBtn = document.getElementById("startBtn");
		startBtn.setAttribute("state","back");
		startBtn.innerHTML = "Pause Match";
		startBtn.setAttribute("onclick", "pause()");
		
		//TODO hide abort option	
		var show = document.getElementById("showBtn");
		show.setAttribute("state", "off");
		show.disabled = true;
		show.innerHTML = "Set Display";
		show.setAttribute("onclick", "setDisplay()");	
		
	}).fail( function(xhr, textStatus, errorThrown) {
        console.log(textStatus);
    });
}

function abort(){

	var postObj = {};
	$.post("../time/reset/",postObj).done(function(data){
	
		acceptScores = false;
	
		var show = document.getElementById("showBtn");
		show.setAttribute("state", "ready");
		show.disabled = false;
		show.innerHTML = "Set Display";
		show.setAttribute("onclick", "setDisplay()");
		//reenable match preview, start, and re-randomize.
		
		var preview = document.getElementById("previewBtn");
		preview.setAttribute("state", "ready");
		preview.disabled = false;
		var rand = document.getElementById("randomBtn");
		rand.setAttribute("state", "warn");
		rand.disabled = false;
		var startBtn = document.getElementById("startBtn");
		startBtn.setAttribute("state","ready");
		startBtn.innerHTML = "Start Match";
		startBtn.setAttribute("onclick", "start()");
		
		//UNDO LOCKOUT
  		var tabs = document.getElementsByClassName("tabButton");
  		for(var i = 0; i < tabs.length; i++){
  			tabs[i].setAttribute("state", "ready");
  			tabs[i].disabled = false;
  		}
  		
	}).fail( function(xhr, textStatus, errorThrown) {
        console.log(textStatus);
    });
}

function showPreview(){
	var postObj = {};
	$.post("../display/preview/",postObj).done(function(data){
		document.getElementById("randomBtn").setAttribute("state","ready");
		document.getElementById("randomBtn").disabled = false;
	}).fail( function(xhr, textStatus, errorThrown) {
        console.log(textStatus);
    });
}

function lockout(){
	//Lockout refs and allow editing on control page.
	//sends command to server. server should notify all waitinf for ref review, which will 
	//adjust commit buttomn here.
	//Sets match status to PRE_COMMIT (shoudl reject everything else from refs?) 
	var postObj = {};
	$.post("../control/lockout/",postObj).done(function(data){}).fail( function(xhr, textStatus, errorThrown) {
        console.log(textStatus);
    });
}


function commit(){
	var postObj = getCommitObject();
	//TODO send DQs and cards. Server should already have all scores. 
	//TODO after commit, update schedule tab
	$.post("../scorecommit/",postObj).done(function(data){
		console.log(data);
		
		var postBtn = document.getElementById("postBtn");
		postBtn.setAttribute("state","ready");
		postBtn.disabled = false;
		var commitBn = document.getElementById("commitBtn");
		commitBtn.setAttribute("state", "off");
		commitBtn.disabled = true;
		var preview = document.getElementById("previewBtn");
		preview.setAttribute("state", "ready");
		preview.disabled = false;
		
		if(document.getElementById("randomBtn").getAttribute("state") == "warn"){
			var showRand = document.getElementById("showBtn");
			showRand.disabled = false;
			showRand.setAttribute("state", "ready");
		}
		
		
		
		
  		
		
		setControlState(true);
		
		getScheduleStatus();
  		getCurrentMatchData();
		
		
		
	}).fail( function(xhr, textStatus, errorThrown) {
        console.log(textStatus);
    });
}

function post(){ //posts results to AD
	var postBtn = document.getElementById("postBtn");
	postBtn.setAttribute("state","off");
	//postBtn.diabled = true;
	
	var preview = document.getElementById("previewBtn");
	preview.setAttribute("state", "ready");
	preview.disabled = false;
/*	var rand = document.getElementById("randomBtn");
	rand.setAttribute("state", "ready");
	rand.innerHTML = "Randomize";
	rand.disabled = false;
	*/
	//send command
	var postObj = {};
	$.post("../display/results/",postObj).done(function(data){}).fail( function(xhr, textStatus, errorThrown) {
        console.log(textStatus);
    });
}

function postOld(src){
	var postObj = {match:src.id.substring(5)};
	$.post("../display/postold/",postObj).done(function(data){}).fail( function(xhr, textStatus, errorThrown) {
        console.log(textStatus);
    });
}
var enableTeamTimeoutID;
function timeoutCommand(cmd){
	var postObj = {};
	$.post("../timeout/"+cmd+"/",postObj).done(
	function(data){
		//we successfully called timout (kinda, the server doesn't really know, but it _thinks_ we did, and that is good enough for us)
		if (cmd == 'team') {
			$("#teamTO").attr("disabled", "disabled");
			$("#teamTO").html("Timeout called");
			enableTeamTimeoutID = window.setTimeout(function() {
				$("#teamTO").removeAttr("disabled");
				$("#teamTO").html("Team Timeout");	
			}, 3*60*1000);//set to re-enable in 3 minutes
		} else if (cmd == 'end') {
			// if we were in a team timeout then we need to make sure we re-enable it
			$("#teamTO").removeAttr("disabled");
			$("#teamTO").html("Team Timeout");
			//cancel the timer if it exists
			window.clearTimout(enableTeamTimeoutID);
		}
	}).fail( function(xhr, textStatus, errorThrown) {
        console.log(textStatus);
    });
}

function openTab(event, tabName){
	tabcontent = document.getElementsByClassName("tabContent");
	for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "none";
    }
    document.getElementById(tabName).style.display = "block";
}
function startSelection(){
	$.post("../selection/start/").done(function(data){
		fillSelectionData(data);
		document.getElementById("saveBtn").disabled = false;
		document.getElementById("undoBtn").disabled = false;
		document.getElementById("clearBtn").disabled = false;
	}).fail(function(xhr, textStatus, errorThrown) {
        console.log(textStatus);
    });
}
function select(team){
	$.post("../selection/select/",{team:team, op:"SELECT"}).done(function(data){
		fillSelectionData(data);
	}).fail(function(xhr, textStatus, errorThrown) {
        console.log(textStatus);
    });
}
function decline(team){
	$.post("../selection/select/",{team:team, op:"DECLINE"}).done(function(data){
		fillSelectionData(data);
	}).fail(function(xhr, textStatus, errorThrown) {
        console.log(textStatus);
    });
}
function clearSelection(){
	$.post("../selection/clear/").done(function(data){
		fillSelectionData(data);
	}).fail(function(xhr, textStatus, errorThrown) {
        console.log(textStatus);
    });
}
function undoSelection(){
	$.post("../selection/undo/").done(function(data){
		fillSelectionData(data);
	}).fail(function(xhr, textStatus, errorThrown) {
        console.log(textStatus);
    });
}
function saveSelection(){
	$.post("../selection/save/").done(function(data){
		getCurrentMatchData();
		getScheduleStatus();
	}).fail(function(xhr, textStatus, errorThrown) {
        console.log(textStatus);
    });
}

function fillSelectionData(data){
	var data = JSON.parse(data);
	for(var a = 0; a < 4; a ++){
		for(var t = 0; t < 3; t++){
			document.getElementById("a"+(a+1)+"t"+(t+1)).innerHTML = data.alliances[a][t] != null ? data.alliances[a][t].number : "";
		}
	}	
	var tab = document.getElementById("available");
	var trs = tab.getElementsByTagName("tr");
	while(trs.length > 1){
		tab.removeChild(trs[1]);
	}
	for(var i = 0; i < data.available.length; i++){
		var tr = document.createElement("tr");
		var td1 = document.createElement("td");
		var td2 = document.createElement("td");
		var td3 = document.createElement("td");
		var td4 = document.createElement("td");
		var td5 = document.createElement("td");
		var btn1 = document.createElement("button");
		var btn2 = document.createElement("button");
		
		var t = data.available[i]
		
		td1.innerHTML = t.rank;
		td2.innerHTML = t.team;
		td3.innerHTML = t.name;
		btn1.innerHTML = "Select";
		btn2.innerHTML = "Decline";
		btn1.setAttribute("onclick","select("+t.team+")");
		btn2.setAttribute("onclick","decline("+t.team+")");
		
		td4.appendChild(btn1);
		td5.appendChild(btn2);
		tr.appendChild(td1);
		tr.appendChild(td2);
		tr.appendChild(td3);
		tr.appendChild(td4);
		tr.appendChild(td5);
		tab.appendChild(tr);
	}
}

</script>
		<div id="menuBar">Match Control Page</div>
		#topBar()
		<div id="matchControl">
			<button class="matchControlButton" id="previewBtn"onclick="showPreview()"state="ready">Match Preview</button>
			<button class="matchControlButton" id="randomBtn" onclick="randomize()"  state = "off" disabled>Randomize</button>			
			<button class="matchControlButton" id="showBtn"   onclick="setDisplay()" state = "off" disabled>Set Display</button>
			<button class="matchControlButton" id="startBtn"  onclick="start()"      state = "off" disabled>Start Match</button>
			<button class="matchControlButton" id="commitBtn" onclick="lockout()"     state = "off" disabled>Edit Now</button>
			<button class="matchControlButton" id="postBtn"   onclick="post()"       state = "off" disabled>Show Results</button>
			
		</div>
		<!-- TODO https://www.w3schools.com/howto/howto_js_tabs.asp -->
		<div id="tabBar">
			<button class="tabButton" onclick="openTab(event, 'ScheduleTab')">Schedule</button>
			<button class="tabButton" onclick="openTab(event, 'ScoreTab')" id="scoreTabBtn">Scores</button>
			<button class="tabButton" onclick="openTab(event, 'SettingsTab')" id="settingsTabBtn">Settings</button>
			<button class="tabButton" onclick="openTab(event, 'SelectionTab')">Alliance Selection</button>
		</div>
		<div class="tabContent" id="ScoreTab">
			<div id="leftScores">
				#scores("red")
			</div>
			<div id="rightScores">
				#scores("blue")
				
			</div>
		</div>
		<div class="tabContent" id="ScheduleTab">
			<div class="scheduleEntry">
				<div class="scheduleMatch">Match</div>
				<div class="scheduleStatus">Status</div>
				<div class="scheduleTeam">Red Score</div>
				<div class="scheduleTeam">Red 1</div>
				<div class="scheduleTeam">Red 2</div>
				<div class="scheduleTeam">Red 3</div>
				<div class="scheduleTeam">Blue 1</div>
				<div class="scheduleTeam">Blue 2</div>
				<div class="scheduleTeam">Blue 3</div>
				<div class="scheduleTeam">Blue Score</div>		
				<div class="scheduleTeam">Play</div>
				<div class="scheduleTeam">Post Result</div>		
			</div>
			
		</div>
		<div class="tabContent" id="SettingsTab">
			<fieldset style="float:left;">
				<legend>System Test</legend>
				<button class="matchControlButton" onclick="loadMatch(this)" id="match-1">Test Match</button>
			</fieldset>
			<fieldset id="timeoutControls">
				<legend>Timeout Controls</legend>
				<button class="matchControlButton" id="fieldTO" onclick="timeoutCommand('field')">Field Timeout</button>
				<button class="matchControlButton" id="teamTO" onclick="timeoutCommand('team')">Team Timeout</button>
				<button class="matchControlButton" id="endTO" onclick="timeoutCommand('end')">End Timeout</button>
				<button class="matchControlButton" id="showTO" onclick="timeoutCommand('show')">Display Timeout</button>
			</fieldset>
			<fieldset id="externalRandomize">
				<legend>External Randomization</legend>
				<button class="matchControlButton" id="rand1" onclick="randomize(1)">1</button>
				<button class="matchControlButton" id="rand2" onclick="randomize(2)">2</button>
				<button class="matchControlButton" id="rand3" onclick="randomize(3)">3</button>
				<button class="matchControlButton" id="rand4" onclick="randomize(4)">4</button>
				<button class="matchControlButton" id="rand5" onclick="randomize(5)">5</button>
				<button class="matchControlButton" id="rand6" onclick="randomize(6)">6</button>
			</fieldset>
			<fieldset>
				<legend>Match Timer</legend>
			</fieldset>
			
		</div>
		<div class="tabContent" id="SelectionTab">
			<div style="height:10%;width:100%;display: flex;justify-content: center;">
				<button class="matchControlButton" id="startSelection" onclick="startSelection()" >Start Alliance Selection</button>
			</div>
			<div style="height:90%; width:40%;float:left;">
				<table border=3>
					<tr><th>Alliance</th><th>Captain</th><th>Pick 1</th><th>Pick 2</th></tr>
					<tr><td>1</td><td id="a1t1"></td><td id="a1t2"></td><td id="a1t3"></td></tr>
					<tr><td>2</td><td id="a2t1"></td><td id="a2t2"></td><td id="a2t3"></td></tr>
					<tr><td>3</td><td id="a3t1"></td><td id="a3t2"></td><td id="a3t3"></td></tr>
					<tr><td>4</td><td id="a4t1"></td><td id="a4t2"></td><td id="a4t3"></td></tr>
				</table>
				<button class="matchControlButton" id="undoBtn" onclick="undoSelection()" disabled>Undo</button>
				<button class="matchControlButton" id="clearBtn" onclick="clearSelection()" disabled>Clear Alliances</button>
				<button class="matchControlButton" id="saveBtn" onclick="saveSelection()" disabled>Generate Matches</button>
			</div>
				
			<div style="height:90%; width:60%;float:left;">
				<table id="available">
					<tr><th>Rank</th><th>Team</th><th>Name</th><th></th><th></th></tr>
				</table>
			</div>
		</div>
	</body>
</html>